Index: codereview/views.py
===================================================================
--- codereview/views.py	(revision 427)
+++ codereview/views.py	(working copy)
@@ -651,6 +651,8 @@
   issues = query.fetch(limit+1, offset)
   more = bool(issues[limit:])
   if more:
+    # item deletion not supported by Django's QuerySet.
+    issues = list(issues)
     del issues[limit:]
   if more:
     next = '/all?offset=%d&limit=%d' % (offset+limit, limit)
@@ -730,9 +732,10 @@
       user))
   review_issues = [issue for issue in db.GqlQuery(
       'SELECT * FROM Issue '
-      'WHERE closed = FALSE AND reviewers = :1 '
+      'WHERE closed = FALSE '
       'ORDER BY modified DESC', user.email())
-      if issue.owner != user and _can_view_issue(request.user, issue)]
+      if issue.owner != user and _can_view_issue(request.user, issue)
+                   and user.email in issue.reviewers]
   closed_issues = [issue for issue in db.GqlQuery(
       'SELECT * FROM Issue '
       'WHERE closed = TRUE AND modified > :1 AND owner = :2 '
@@ -741,7 +744,7 @@
       if _can_view_issue(request.user, issue)]
   _optimize_draft_counts(my_issues + review_issues + closed_issues)
   return respond(request, 'user.html',
-                 {'email': user.email(),
+                 {'email':user.email,
                   'my_issues': my_issues,
                   'review_issues': review_issues,
                   'closed_issues': closed_issues,
@@ -1162,7 +1165,7 @@
             account = models.Account.get_account_for_nickname(email)
             if account is None:
               raise db.BadValueError('Unknown user: %s' % email)
-            db_email = db.Email(account.user.email().lower())
+            db_email = db.Email(account.user.email.lower())
           elif email.count('@') != 1:
             raise db.BadValueError('Invalid email address: %s' % email)
           else:
@@ -1336,7 +1339,7 @@
   for msg in issue.message_set.order('date'):
     if not msg.draft:
       messages.append(msg)
-    elif msg.draft and request.user and msg.sender == request.user.email():
+    elif msg.draft and request.user and msg.sender == request.user.email:
       has_draft_message = True
   return respond(request, 'issue.html',
                  {'issue': issue, 'patchsets': patchsets,
@@ -1373,7 +1376,7 @@
 
     accounts = models.Account.all()
     accounts.filter("lower_%s >= " % property, query)
-    accounts.filter("lower_%s < " % property, query + u"\ufffd")
+    accounts.filter("lower_%s < " % property, query + u"\\ufffd")
     accounts.order("lower_%s" % property);
     for account in accounts:
       if account.key() in added:
@@ -2010,7 +2013,7 @@
   template = 'mails/comment.txt'
   if request.user == issue.owner:
     if db.GqlQuery('SELECT * FROM Message WHERE ANCESTOR IS :1 AND sender = :2',
-                   issue, db.Email(request.user.email())).count(1) == 0:
+                   issue, db.Email(request.user.email)).count(1) == 0:
       template = 'mails/review.txt'
       files, patch = _get_affected_files(issue)
       context.update({'files': files, 'patch': patch, 'base': issue.base})
@@ -2030,16 +2033,16 @@
   if not request.POST.get('message_only', None):
     query = models.Message.gql(('WHERE issue = :1 AND sender = :2 '
                                 'AND draft = TRUE'), issue,
-                               request.user.email())
+                               request.user.email)
     draft_message = query.get()
   if request.method != 'POST':
     reviewers = issue.reviewers[:]
     cc = issue.cc[:]
-    if request.user != issue.owner and (request.user.email()
+    if request.user != issue.owner and (request.user.email
                                         not in issue.reviewers):
-      reviewers.append(request.user.email())
-      if request.user.email() in cc:
-        cc.remove(request.user.email())
+      reviewers.append(request.user.email)
+      if request.user.email in cc:
+        cc.remove(request.user.email)
     reviewers = [models.Account.get_nickname_for_email(reviewer,
                                                        default=reviewer)
                  for reviewer in reviewers]
@@ -2071,15 +2074,15 @@
     reviewers = _get_emails(form, 'reviewers')
   else:
     reviewers = issue.reviewers
-    if request.user != issue.owner and request.user.email() not in reviewers:
-      reviewers.append(db.Email(request.user.email()))
+    if request.user != issue.owner and request.user.email not in reviewers:
+      reviewers.append(db.Email(request.user.email))
   if form.is_valid() and not form.cleaned_data.get('message_only', False):
     cc = _get_emails(form, 'cc')
   else:
     cc = issue.cc
     # The user is in the reviewer list, remove them from CC if they're there.
-    if request.user.email() in cc:
-      cc.remove(request.user.email())
+    if request.user.email in cc:
+      cc.remove(request.user.email)
   if not form.is_valid():
     return respond(request, 'publish.html', {'form': form, 'issue': issue})
   issue.reviewers = reviewers
@@ -2146,7 +2149,10 @@
         # Get the patch key value without loading the patch entity.
         # NOTE: Unlike the old version of this code, this is the
         # recommended and documented way to do this!
-        pkey = models.Comment.patch.get_value_for_datastore(c)
+        # pkey = models.Comment.patch.get_value_for_datastore(c)
+        # FIXME(andi): see Issue 1
+        #   http://code.google.com/p/django-gae2django/issues/detail?id=1
+        pkey = getattr(c, '_patch', None)
         if pkey in patches:
           patch = patches[pkey]
           c.patch = patch
@@ -2214,8 +2220,8 @@
   """Helper to create a Message instance and optionally send an email."""
   template, context = _get_mail_template(request, issue)
   # Decide who should receive mail
-  my_email = db.Email(request.user.email())
-  to = [db.Email(issue.owner.email())] + issue.reviewers
+  my_email = db.Email(request.user.email)
+  to = [db.Email(issue.owner.email)] + issue.reviewers
   cc = issue.cc[:]
   reply_to = to + cc
   if my_email in to and len(to) > 1:  # send_mail() wants a non-empty to list
@@ -2313,7 +2319,7 @@
   """/<issue>/draft_message - Retrieve, modify and delete draft messages."""
   query = models.Message.gql(('WHERE issue = :1 AND sender = :2 '
                               'AND draft = TRUE'),
-                             request.issue, request.user.email())
+                             request.issue, request.user.email)
   if query.count() == 0:
     draft_message = None
   else:
@@ -2353,7 +2359,7 @@
   """
   if draft is None:
     draft = models.Message(issue=request.issue, parent=request.issue,
-                           sender=request.user.email(), draft=True)
+                           sender=request.user.email, draft=True)
   draft.text = request.POST.get('reviewmsg')
   draft.put()
   return HttpResponse(draft.text, content_type='text/plain')
@@ -2559,7 +2565,7 @@
 
 def _user_popup(request):
   user = request.user_to_show
-  popup_html = memcache.get('user_popup:' + user.email())
+  popup_html = memcache.get('user_popup:' + user.email)
   if popup_html is None:
     num_issues_created = db.GqlQuery(
       'SELECT * FROM Issue '
@@ -2568,14 +2574,14 @@
     num_issues_reviewed = db.GqlQuery(
       'SELECT * FROM Issue '
       'WHERE closed = FALSE AND reviewers = :1',
-      user.email()).count()
+      user.email).count()
 
-    user.nickname = models.Account.get_nickname_for_email(user.email())
+    user.nickname = models.Account.get_nickname_for_email(user.email)
     popup_html = render_to_response('user_popup.html',
                             {'user': user,
                              'num_issues_created': num_issues_created,
                              'num_issues_reviewed': num_issues_reviewed,
                              })
     # Use time expired cache because the number of issues will change over time
-    memcache.add('user_popup:' + user.email(), popup_html, 60)
+    memcache.add('user_popup:' + user.email, popup_html, 60)
   return popup_html
